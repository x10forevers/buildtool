# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("Olympus", "makoIsGood!")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'git://github.com/CyanogenMod/android.git',
        workdir='gitpoller-workdir', branch='cm-10.1',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.schedulers import timed
c['schedulers'] = []

#Define Nightly CM build
nightly = timed.Periodic(name="Nightly CM",
                builderNames=["cm-10.1"],
                periodicBuildTimer=24*60*60)

c['schedulers'] = [nightly]

c['schedulers'].append(ForceScheduler(
                            name="On-Demand CM Build",
                            builderNames=["cm-10.1"]))
c['schedulers'].append(ForceScheduler(
                            name="On-Demand AOSP Build",
                            builderNames=["aosp-4.2"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.oldsource import Repo
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
factory_cm = BuildFactory()

# check out the source
factory_cm.addStep(Repo(manifest_url="git://github.com/CyanogenMod/android.git", manifest_branch="cm-10.1"))
# Get prebuilts
factory_cm.addStep(ShellCommand(command=["/bin/sh", "-c", "cd vendor/cm/ && ./get-prebuilts"],
			     description	= 'Getting prebuilt CM stuff'))
#Breakfast Mako                     
factory_cm.addStep(ShellCommand(command=["/bin/sh", "-c", ". build/envsetup.sh && breakfast mako"],
			     description	= 'Breakfast mako'))
#Breakfast Manta
factory_cm.addStep(ShellCommand(command=["/bin/sh", "-c", ". build/envsetup.sh && breakfast manta"],
                             description        = 'Breakfast manta'))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="cm-10.1",
      slavenames=["Olympus"],
      factory=factory_cm))

factory_aosp = BuildFactory()

# check out the source
factory_aosp.addStep(Repo(manifest_url="https://android.googlesource.com/platform/manifest", manifest_branch="android-4.2.2_r1"))
#Lunch Mako                     
factory_aosp.addStep(ShellCommand(command=["/bin/sh", "-c", ". build/envsetup.sh && lunch full_mako-userdebug"],
                             description        = 'Lunch mako userdebug'))
#Make
factory_aosp.addStep(Compile(command=["make", "-j4"]))

c['builders'].append(
    BuilderConfig(name="aosp-4.2",
      slavenames=["Olympus"],
      factory=factory_aosp))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("user","pass")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.freenode.org", nick="[BB]Nivlheim",
                             channels=["#connect-utb"],
			     notify_events={
				'exception': 1,
				'successToFailure': 1,
				'failureToSuccess': 1,
				}))
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Nivlheim CM Builds"
c['titleURL'] = "https://olympus.hopto.org/blog"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
